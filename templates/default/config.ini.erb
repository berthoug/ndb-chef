# For documentation on config params, see:
# http://dev.mysql.com/doc/refman/5.5/en/mysql-cluster-ndbd-definition.html
# For overview:
# http://docs.oracle.com/cd/E17952_01/refman-5.5-en/mysql-cluster-ndb-innodb-engines.html

[NDBD DEFAULT]
#Used by ndbmdmt to determine the number of LQH threads
<% cpus = (node[:cpu][:total] / 2) + 1 -%>
<% if cpus < 2
     cpus = 2
   elsif cpus > 8
     cpus = 8
   end
   cpus = node[:ndb][:MaxNoOfExecutionThreads].empty? ? cpus : node[:ndb][:MaxNoOfExecutionThreads]
-%>
MaxNoOfExecutionThreads=<%= cpus  %>

#More flexible than MaxNoOfExecutionThreads, supports > 8 threads. Decide which service to bind each thread to
#Threadconfig=main={cpubind=0},ldm={count=8,cpubind=1,2,3,4,13,14,15,16},io={count=4,cpubind=5,6,17,18},rep={cpubind=7},recv={count=2,cpubind=8,19}

# In order to take advantage of the enhanced stability that the use of ThreadConfig offers, it is necessary to insure that CPUs are isolated,
# and that they not subject to interrupts, or to being scheduled for other tasks by the operating system. 
# On many Linux systems, you can do this by setting IRQBALANCE_BANNED_CPUS in /etc/sysconfig/irqbalance to 0xFFFFF0, and by using the isolcpus boot option in grub.conf. 
# For specific information, see your operating system or platform documentation.
<% ThreadConfig = node[:ndb][:MaxNoOfExecutionThreads].empty? ? "" : "ThreadConfig=" -%>
<%= ThreadConfig  %><%= node[:ndb][:MaxNoOfExecutionThreads] %>

#The number of copies of the data stored on different nodes in the cluster
NoOfReplicas=<%= node[:ndb][:NoOfReplicas] %>

#The amount of main memory (RAM) used to store columns and ordered indexes in tables, plus some overhead
# <% dataMemory = (node['memory']['total'][0..-3].to_i / (1024 * 100)) * ((node[:ndb][:memory].to_i) / 5 ) -%>
#The amount of main memory (RAM) used to hash indexes in tables, plus some overhead

DataMemory=<%= node[:ndb][:DataMemory] %>M

# Calculate IndexMemory size, can be overriden by user setting node[:ndb][:IndexMemory]
<% index_mem = if node[:ndb][:IndexMemory].empty?
                   (node[:ndb][:DataMemory].to_i / 4).to_s
               else
                   node[:ndb][:IndexMemory]
               end
-%>
IndexMemory=<%= index_mem  %>M

#   REDO_LOG_SIZE=`expr ${NUM_FRAGMENT_LOGFILES} \* 64`
#  NUM_FRAGMENT_LOGFILES=`expr ${DATA_MEMORY} \* 6 / 64`
# See: http://www.slideshare.net/Severalnines/severalnines-my-sqlclusterpt2013
#The amount of disk space (NoOfFragmentLogFiles * 64MB) used to store the Redo Log (used for node recovery)
NoOfFragmentLogFiles=<%= node[:ndb][:DataMemory].to_i / 10 %>

#The size of a Redo Log file on disk.
FragmentLogFileSize=<%= node[:ndb][:FragmentLogFileSize] %>

# maximum number of attributes, tables, indexes, and trigger objects used by indexes, events, and replication between clusters
MaxNoOfAttributes=<%= node[:ndb][:MaxNoOfAttributes] %>

# A table object is allocated for each table and for each unique hash index in the cluster.
MaxNoOfTables=<%= node[:ndb][:MaxNoOfTables] %>

MaxNoOfOrderedIndexes=<%= node[:ndb][:MaxNoOfOrderedIndexes] %>

MaxNoOfUniqueHashIndexes=<%= node[:ndb][:MaxNoOfUniqueHashIndexes] %>

MaxDMLOperationsPerTransaction=<%= node[:ndb][:MaxDMLOperationsPerTransaction] %>

TransactionBufferMemory=<%= node[:ndb][:TransactionBufferMemory] %>

MaxParallelScansPerFragment=<%= node[:ndb][:MaxParallelScansPerFragment] %>

# Set the maximum rate for writing to disk, in bytes per second, by local checkpoints and backup operations when no restarts 
# (by this data node or any other data node) are taking place in this MySQL Cluster.
MaxDiskWriteSpeed=<%= node[:ndb][:MaxDiskWriteSpeed] %>

# Set the maximum rate for writing to disk, in bytes per second, by local checkpoints and backup operations when one or more data nodes 
# in this MySQL Cluster are restarting, other than this node.
MaxDiskWriteSpeedOtherNodeRestart=<%= node[:ndb][:MaxDiskWriteSpeedOtherNodeRestart] %>

MaxDiskWriteSpeedOwnRestart=<%= node[:ndb][:MaxDiskWriteSpeedOwnRestart] %>

MinDiskWriteSpeed=<%= node[:ndb][:MinDiskWriteSpeed] %>

#The maximum number of bytes to store before flushing data to a local checkpoint file
#Ignored when ODirect is set to true
DiskSyncSize=<%= node[:ndb][:DiskSyncSize] %>

#The size of the RedoBuffer used to buffer writes to the disk subsystem. Increase for high write-rate or slow disk.
RedoBuffer=<%= node[:ndb][:RedoBuffer] %>

#Internal buffer used for passing messages within individual nodes and between nodes. Increase for huge batches.
LongMessageBuffer=<%= node[:ndb][:LongMessageBuffer] %>

#The maximum time in ms that is permitted to lapse between operations in the same transaction before the transaction is aborted.
TransactionInactiveTimeout=<%= node[:ndb][:TransactionInactiveTimeout] %>

TransactionDeadlockDetectionTimeout=<%= node[:ndb][:TransactionDeadlockDetectionTimeout] %>

#0: Disables locking. This is the default value.
#1: Performs the lock after allocating memory for the process.
#2: Performs the lock before memory for the process is allocated.
# Needs root privileges
LockPagesInMainMemory=<%= node[:ndb][:LockPagesInMainMemory] %>

# Setting these parameters allows you to take advantage of real-time scheduling
# of NDBCLUSTER threads to get higher throughput.
RealTimeScheduler=<%= node[:ndb][:RealTimeScheduler] %>

# This parameter specifies the time in microseconds for threads to be executed in the scheduler before sleeping.
# Default = 0. Higher value to optimize latency over throughput.
SchedulerSpinTimer=<%= node[:ndb][:SchedulerSpinTimer] %>

# Specifies the time in microseconds for threads to be executed in the scheduler before being sent. 
# Default is 50. Higher values give higher throughput at cost of increased latency.
# SchedulerExecutionTimer=100

# Number of threads to create when rebuilding indexes during a system or node start
BuildIndexThreads=<%= node[:ndb][:BuildIndexThreads] %>

# Savings of up to 50% over noncompressed LCPs and backups
CompressedLCP=<%= node[:ndb][:CompressedLCP] %>
CompressedBackup=<%= node[:ndb][:CompressedBackup] %>

BackupMaxWriteSize= <%= node[:ndb][:BackupMaxWriteSize] %>
BackupLogBufferSize= <%= node[:ndb][:BackupLogBufferSize] %>
BackupDataBufferSize= <%= node[:ndb][:BackupDataBufferSize] %>  
BackupMemory        = <%= node[:ndb][:BackupMemory] %>  

#The maximum size of the memory unit to use when allocating memory for tables
MaxAllocate=<%= node[:ndb][:MaxAllocate] %>

#The size of the table hash maps used by NDB
DefaultHashMapSize=<%= node[:ndb][:DefaultHashMapSize] %>

# Needs root privileges
ODirect=<%= node[:ndb][:ODirect] %>

#The number of transaction records available at each data node. Increase this if you have a higher number of concurrent transactions
MaxNoOfConcurrentTransactions=<%= node[:ndb][:MaxNoOfConcurrentTransactions] %>

#The number of operation records available at each data node. Increase this if you have a higher number of concurrent operations
MaxNoOfConcurrentOperations=<%= node[:ndb][:MaxNoOfConcurrentOperations] %>

#The number of operation records available at each data node for queries that use a hash index. Increase this if you have a higher number of concurrent operations
MaxNoOfConcurrentIndexOperations=<%= node[:ndb][:MaxNoOfConcurrentIndexOperations] %>

# Max number of parallel scans. Max value is 500.
MaxNoOfConcurrentScans=<%= node[:ndb][:MaxNoOfConcurrentScans] %>

[MYSQLD DEFAULT]

[NDB_MGMD DEFAULT]

[TCP DEFAULT]
SendBufferMemory=<%= node[:ndb][:SendBufferMemory] %>
ReceiveBufferMemory=<%= node[:ndb][:ReceiveBufferMemory]%>


#
# Supports up to Max 2 ndb_mgmds. First one gets ArbitrationRank=1, second gets lower priority ArbitrationRank=2
#
<% id = node[:mgm][:id] -%>
<% rank = 1 -%>
<% for mgmd in node[:ndb][:mgmd][:private_ips] -%>
[NDB_MGMD]
NodeId=<%= id %>
HostName=<%= mgmd %>
PortNumber=<%= node[:ndb][:mgmd][:port] %>
DataDir=<%= node[:ndb][:log_dir] %>
LogDestination=FILE:filename=<%= node[:ndb][:log_dir] %>/cluster.log,maxsize=10000000,maxfiles=6
ArbitrationRank=<%= rank %>
<% id += 1 -%>
<% rank += 1 -%>
<% end -%>

<% id = 1 -%>
<% for ndbdNode in node[:ndb][:ndbd][:private_ips] -%>
[NDBD] 
NodeId=<%= id %>
HostName=<%= ndbdNode %>
ServerPort=<%= node[:ndb][:ndbd][:port] %>
DataDir=<%= node[:ndb][:log_dir] %>
FileSystemPath=<%= "#{node[:ndb][:data_dir]}/#{id}" %>
<% id += 1 -%>
<% end -%>

#MySQL Servers, Memcached servers, and Clusterj clients.
<% hostId = node[:mysql][:id] -%>
<% if (node.attribute?(:ndb) && node[:ndb].attribute?(:mysqld) && node[:ndb][:mysqld].attribute?(:private_ips) && !node[:ndb][:mysqld][:private_ips].empty?) -%>
<% for mysql in node[:ndb][:mysqld][:private_ips] -%>
# for count in 0..(@num_client_slots-1)
[MYSQLD]
NodeId=<%= hostId %>
HostName=<%= mysql %>
<% hostId += 1 -%>
<% end -%>
<% end -%>

<% hostId = node[:memcached][:id] -%>
<% if (node.attribute?(:ndb) && node[:ndb].attribute?(:memcached) && node[:ndb][:memcached].attribute?(:private_ips) && !node[:ndb][:memcached][:private_ips].empty?) -%>
<% for memcached in node[:ndb][:memcached][:private_ips] -%>
[MYSQLD]
NodeId=<%= hostId %>
HostName=<%= memcached %>
<% hostId += 1 -%>
<% end -%>
<% end -%>

<% hostId = node[:nn][:id] -%>
<% if (node.attribute?(:hop) && node[:hop].attribute?(:nn) && node[:hop][:nn].attribute?(:private_ips) && !node[:hop][:nn][:private_ips].empty?) -%>
<% for nn in node[:hop][:nn][:private_ips] -%>
[MYSQLD]
NodeId=<%= hostId %>
HostName=<%= nn %>
<% hostId += 1 -%>
<% end -%>
<% end -%>

# These slots are extra slots for any clients.
# Remove these slots for production use.
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
